---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/23/2020 8:27 PM
---

local CustomAttackHelper = require("__enemyracemanager__/lib/helper/custom_attack_helper")
local ERMConfig = require("__enemyracemanager__/lib/global_config")
require("__erm_terran__/global")
local String = require("__erm_libs__/stdlib/string")

local CustomAttacks = CustomAttackHelper

CustomAttacks.add_nuke_to_queue = function(event)
    if event.source_entity and event.source_entity.valid and (event.target_entity or event.target_position) then
        local target_position = event.target_position
        if event.target_entity then
            target_position = event.target_entity.position
        end

        local targeter_render_obj = rendering.draw_animation({
            animation = MOD_NAME .. "--nuclear_targeter",
            target = target_position,
            time_to_live = NUKE_WAIT_TIME + 75,
            surface = event.source_entity.surface.index,
            render_layer = "radius-visualization"
        })
        storage.nuke_tracker[event.source_entity.unit_number] = {
            entity = event.source_entity,
            target_position = target_position,
            launch_tick = event.tick + NUKE_WAIT_TIME,
            targeter_render_obj = targeter_render_obj
        }
        storage.nuke_tracker_total = storage.nuke_tracker_total + 1
    end
end

CustomAttacks.cancel_nuke_from_queue = function(event)
    if event.source_entity.valid and storage.nuke_tracker[event.source_entity.unit_number] then
        local nuke_data = storage.nuke_tracker[event.source_entity.unit_number]
        nuke_data.targeter_render_obj.destroy()
        storage.nuke_tracker[event.source_entity.unit_number] = nil
        storage.nuke_tracker_total = storage.nuke_tracker_total - 1
    end
end

CustomAttacks.spawn_nuke = function(event)
    if storage.nuke_tracker_total == 0 then
        return
    end

    for index, nuke_data in pairs(storage.nuke_tracker) do
        if nuke_data.entity.valid and event.tick >= nuke_data.launch_tick then
            local surface = nuke_data.entity.surface
            local spawn_position = nuke_data.entity.position
            spawn_position.y = spawn_position.y - 32;
            nuke_data.targeter_render_obj.destroy()
            storage.nuke_tracker[index] = nil
            storage.nuke_tracker_total = storage.nuke_tracker_total - 1

            surface.create_entity {
                name = MOD_NAME .. "--atomic-bomb",
                --target = nuke_data.target_position,
                target = {
                    x = nuke_data.target_position.x + math.random(-4,4),
                    y = nuke_data.target_position.y + math.random(-4,4)
                },
                source = nuke_data.entity,
                position = spawn_position,
                direction = defines.direction.south,
                force = nuke_data.entity.force,
                speed = 0.25,
            }

        elseif nuke_data.entity.valid == false and event.tick > nuke_data.launch_tick then
            nuke_data.targeter_render_obj.destroy()
            storage.nuke_tracker[index] = nil
            storage.nuke_tracker_total = storage.nuke_tracker_total - 1
        end
    end
end

local spawn_marines = function(event, make_string)
    local count = 2;

    if CustomAttacks.can_spawn(33) then
        count = count + 1
    end

    if CustomAttacks.can_spawn(15) then
        count = count + 1
    end

    CustomAttacks.drop_player_unit(event, MOD_NAME, "marine--"..make_string, count)
end

CustomAttacks.spawn_marine = function(event)
    if event.source_entity.valid then
        local nameToken = String.split(event.source_entity.name, "--")
        if nameToken[3] then
            spawn_marines(event, nameToken[3])
        end
    end
end

local time_out = 3 * second + 1
local unit_limit = 6
local scan_radius = 10 + settings.startup['enemyracemanager-max-attack-range'].value
local health_ratio = 2
CustomAttacks.asteroid_aoe = function(event)
    local source_entity = event.source_entity
    if source_entity.valid then
        local surface = source_entity.surface
        if surface.valid and surface.platform then
            local surface_index = surface.index
            local next_unit_check = storage.asteroid_next_unit_check
            if next_unit_check[surface_index] and 
                next_unit_check[surface_index] > event.tick 
            then
                return
            end

            
            local units = surface.find_enemy_units(source_entity.position, scan_radius, source_entity.force)
            if next(units) then
                local i = 0
                for _, unit in pairs(units) do
                    if i < unit_limit then
                        unit.damage(source_entity.max_health / health_ratio, source_entity.force)
                        i = i + 1
                    else
                        break
                    end
                end
            end
            next_unit_check[surface_index] = event.tick + time_out
        end
    end
end

return CustomAttacks